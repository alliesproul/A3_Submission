# -*- coding: utf-8 -*-
"""A3_Submission.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pJOYQYGC5VaFAm4Hg8Fap_a8NLhgqka7
"""

import asyncio
import aiohttp
import random
import datetime

cities = ["London", "New York", "Tokyo", "Paris", "São Paulo"]
API_URL = "https://wttr.in/{}?format=j1"
output_file = "weather_log.txt"

async def get_weather(session, city, queue):
  # fetch weather for specific city
  try:
    async with session.get(API_URL.format(city)) as response:
      data = await response.json()
      current = data['current_condition'][0]
      temp_c = current['temp_C']
      humidity = current['humidity']
      desc = current['weatherDesc'][0]['value']
      timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
      # create log entry
      weather_data = f"{timestamp} - {city}: {temp_c}°C, {humidity}% humidity, {desc}"
      # place weather data in queue
      await queue.put(weather_data)
  except Exception as e:
      print(f"Error fetching weather for {city}: {e}")

async def producer(queue):
  # producer that fetches weather data for all cities
  # asynchronous HTTP request
  async with aiohttp.ClientSession() as session:
    # total of 10 rounds
    for _ in range(10):
      tasks = [get_weather(session, city, queue) for city in cities]
      await asyncio.gather(*tasks)
      # random delay between each data collection cycle
      await asyncio.sleep(random.uniform(1, 4))

async def consumer(queue):
  # consumer that logs weather data to file
  with open(output_file, "a") as f:
    while True:
      weather_data = await queue.get()
      # append weather record to file
      f.write(weather_data + "\n")
      print(weather_data)
      f.flush()
      queue.task_done()

async def main():
  queue = asyncio.Queue()
  producer_task = asyncio.create_task(producer(queue))
  consumer_task = asyncio.create_task(consumer(queue))

  await producer_task
  await queue.join()
  consumer_task.cancel()

if __name__ == "__main__":
  await main()